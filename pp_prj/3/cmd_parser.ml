type token =
  | INT of (int)
  | ID of (string)
  | HAS
  | PLUS
  | MINUS
  | READ
  | SAY
  | GOTO
  | ON
  | SEMICOLON
  | COLON
  | LP
  | RP
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "cmd_parser.mly"
# 21 "cmd_parser.ml"
let yytransl_const = [|
  259 (* HAS *);
  260 (* PLUS *);
  261 (* MINUS *);
  262 (* READ *);
  263 (* SAY *);
  264 (* GOTO *);
  265 (* ON *);
  266 (* SEMICOLON *);
  267 (* COLON *);
  268 (* LP *);
  269 (* RP *);
  0 (* EOF *);
  0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* ID *);
  0|]

let yylhs = "\255\255\
             \001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
             \002\000\002\000\002\000\000\000"

let yylen = "\002\000\
             \002\000\003\000\003\000\005\000\005\000\003\000\002\000\004\000\
             \003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
                \000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
                \000\000\000\000\007\000\000\000\000\000\000\000\001\000\002\000\
                \000\000\006\000\009\000\000\000\011\000\000\000\000\000\000\000\
                \008\000\004\000\005\000"

let yydgoto = "\002\000\
               \007\000\008\000"

let yysindex = "\008\000\
                \254\254\000\000\004\255\009\255\015\255\254\254\000\000\003\000\
                \012\255\254\254\000\000\013\255\006\255\254\254\000\000\000\000\
                \016\255\000\000\000\000\021\255\000\000\014\255\023\255\024\255\
                \000\000\000\000\000\000"

let yyrindex = "\000\000\
                \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
                \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
                \001\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
                \000\000\000\000\000\000"

let yygindex = "\000\000\
                \000\000\254\255"

let yytablesize = 271
let yytable = "\003\000\
               \003\000\010\000\015\000\013\000\004\000\005\000\009\000\019\000\
               \001\000\006\000\011\000\022\000\016\000\017\000\010\000\014\000\
               \012\000\018\000\021\000\023\000\024\000\020\000\025\000\014\000\
               \026\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
               \000\000\000\000\003\000\000\000\014\000\003\000\010\000"

let yycheck = "\002\001\
               \000\000\000\000\000\000\006\000\007\001\008\001\003\001\010\000\
               \001\000\012\001\002\001\014\000\001\001\002\001\011\001\010\001\
               \002\001\006\001\013\001\004\001\005\001\009\001\002\001\010\001\
               \002\001\002\001\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
               \255\255\255\255\010\001\255\255\010\001\013\001\013\001"

let yynames_const = "\
  HAS\000\
  PLUS\000\
  MINUS\000\
  READ\000\
  SAY\000\
  GOTO\000\
  ON\000\
  SEMICOLON\000\
  COLON\000\
  LP\000\
  RP\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
     let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
     Obj.repr(
# 12 "cmd_parser.mly"
           ( _1 )
# 174 "cmd_parser.ml"
               : T.cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 15 "cmd_parser.mly"
              ( T.HasNum (_1,_3) )
# 182 "cmd_parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 16 "cmd_parser.mly"
             ( T.HasVar (_1,_3) )
# 190 "cmd_parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 17 "cmd_parser.mly"
                     ( T.HasSum (_1,_3,_5) )
# 199 "cmd_parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 18 "cmd_parser.mly"
                      ( T.HasSub (_1,_3,_5) )
# 208 "cmd_parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 19 "cmd_parser.mly"
               ( T.HasRead _1 )
# 215 "cmd_parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 20 "cmd_parser.mly"
          ( T.Say _2 )
# 222 "cmd_parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 21 "cmd_parser.mly"
                 ( T.Goto (_2,_4) )
# 230 "cmd_parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 22 "cmd_parser.mly"
                ( T.Tag (_1,_3) )
# 238 "cmd_parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 23 "cmd_parser.mly"
                     ( T.Seq (_1,_3) )
# 246 "cmd_parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 24 "cmd_parser.mly"
             ( _2 )
# 253 "cmd_parser.ml"
               : 'cmd))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
  (Parsing.yyparse yytables 1 lexfun lexbuf : T.cmd)
;;
