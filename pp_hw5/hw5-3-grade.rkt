#lang racket

(require "common-grade.rkt")
(require "hw5-3.rkt")


;;; Tape
(printf "Tape\n")

(define tape1 (init-tape (list "a" "b")))
(define tape2 (move-tape-left tape1))
(define tape3 (move-tape-left tape2))
(define tape4 (move-tape-right tape3))
(define tape5 (move-tape-right tape4))
(define tape6 (move-tape-right tape5))
(define tape7 (write-tape tape6 "c"))
(define tape8 (move-tape-right tape7))
(define tape9 (move-tape-right tape8))
(define tape10 (move-tape-right tape9))
(define tape11 (write-tape tape10 "_"))
(define tape12 (move-tape-left tape11))
(define tape13 (move-tape-left tape12))
(define tape14 (write-tape tape13 "d"))
(define tape15 (move-tape-left tape14))

(output (lambda () (equal? "-.-.a.b.-" (print-tape tape1 2))))
(output (lambda () (equal? "-.a.b.-.-" (print-tape tape2 2))))
(output (lambda () (equal? "a.b.-.-.-" (print-tape tape3 2))))
(output (lambda () (equal? "-.a.b.-.-" (print-tape tape4 2))))
(output (lambda () (equal? "-.-.a.b.-" (print-tape tape5 2))))
(output (lambda () (equal? "-.-.-.a.b" (print-tape tape6 2))))
(output (lambda () (equal? "-.-.c.a.b" (print-tape tape7 2))))
(output (lambda () (equal? "-.-.-.-.-.-.-.-.c.a.b.-.-.-.-" (print-tape tape8 7))))
(output (lambda () (equal? "-.-.-.-.-.-.-.-.-.c.a.b.-.-.-" (print-tape tape9 7))))
(output (lambda () (equal? "-.-.-.-.-.-.-.-.-.-.c.a.b.-.-" (print-tape tape10 7))))
(output (lambda () (equal? "-.-.-.-.-.-.-._.-.-.c.a.b.-.-" (print-tape tape11 7))))
(output (lambda () (equal? "-.-.-.-.-.-._.-.-.c.a.b.-.-.-" (print-tape tape12 7))))
(output (lambda () (equal? "-.-.-.-.-._.-.-.c.a.b.-.-.-.-" (print-tape tape13 7))))
(output (lambda () (equal? "-.-.-.-.-._.-.d.c.a.b.-.-.-.-" (print-tape tape14 7))))
(output (lambda () (equal? "-.-.-.-._.-.d.c.a.b.-.-.-.-.-" (print-tape tape15 7))))
(output (lambda () (equal? "-.-.-.-.-.-.-.a.b.c.d.e.-.-.-" (print-tape (init-tape '("a" "b" "c" "d" "e")) 7))))
(output (lambda () (equal? "-.-.-.-.-.-.-.-.-.-.-.-.-.-.-" (print-tape (init-tape '()) 7))))

(output (lambda () (equal? "a" (read-tape tape1))))
(output (lambda () (equal? "b" (read-tape tape2))))
(output (lambda () (equal? "c" (read-tape tape7))))
(output (lambda () (equal? "_" (read-tape tape11))))
(output (lambda () (equal? "-" (read-tape tape12))))
(output (lambda () (equal? "c" (read-tape tape15))))
(output (lambda () (equal? "-" (read-tape (init-tape '())))))
(output (lambda () (equal? "a" (read-tape (init-tape '("a" "b" "c" "d" "e"))))))


;;; Rule table
(printf "Rule table\n")

(define table1 empty-ruletable)
(define table2 (add-rule (make-rule "1" "a" "d" 'right "2") table1))
(define table3 (add-rule (make-rule "2" "b" "e" 'right "3") table2))
(define table4 (add-rule (make-rule "3" "-" "b" 'left "4") table3))
(define table5 (add-rule (make-rule "4" "e" "a" 'left "5") table4))
(define table6 (add-rule (make-rule "5" "d" "c" 'left "6") table5))
(define table7 (add-rule (make-rule "6" "-" "c" 'stay "7") table6))
(define table8 (add-rule (make-rule "1" "c" "d" 'left "4") table7))
(define table9 (add-rule (make-rule "3" "a" "c" 'stay "1") table8))
(define table10 (add-rule (make-rule "6" "a" "-" 'right "3") table9))
(define table11 (add-rule (make-rule "2" "c" "a" 'stay "2") table10))
(define table12 (add-rule (make-rule "2" "d" "b" 'right "3") table11))
(define table13 (add-rule (make-rule "2" "a" "c" 'left "1") table12))
(define table14 (add-rule (make-rule "3" "b" "a" 'right "4") table13))
(define table15 (add-rule (make-rule "3" "c" "b" 'left "2") table14))
(define table16 (add-rule (make-rule "3" "d" "a" 'stay "7") table15))
(define table17 (add-rule (make-rule "7" "a" "b" 'left "4") table16))
(define table18 (add-rule (make-rule "7" "b" "-" 'right "2") table17))
(define table19 (add-rule (make-rule "7" "c" "a" 'stay "3") table18))
(define table20 (add-rule (make-rule "4" "a" "d" 'left "2") table19))
(define table21 (add-rule (make-rule "4" "c" "e" 'left "1") table20))
(define table22 (add-rule (make-rule "4" "b" "-" 'stay "3") table21))
(define table23 (add-rule (make-rule "5" "a" "b" 'right "2") table22))
(define table24 (add-rule (make-rule "5" "b" "a" 'left "3") table23))
(define table25 (add-rule (make-rule "5" "-" "c" 'stay "4") table24))
(define table26 (add-rule (make-rule "2" "-" "a" 'right "3") table25))
(define table27 (add-rule (make-rule "4" "d" "c" 'right "2") table26))
(define table28 (add-rule (make-rule "4" "-" "b" 'left "2") table27))

(output (lambda () (equal? (cons "d" (cons 'right "2")) (match-rule "1" "a" table28))))
(output (lambda () (equal? (cons "e" (cons 'right "3")) (match-rule "2" "b" table28))))
(output (lambda () (equal? (cons "b" (cons 'left "4")) (match-rule "3" "-" table28))))
(output (lambda () (equal? (cons "a" (cons 'left "5")) (match-rule "4" "e" table28))))
(output (lambda () (equal? (cons "c" (cons 'left "6")) (match-rule "5" "d" table28))))
(output (lambda () (equal? (cons "c" (cons 'stay "7")) (match-rule "6" "-" table28))))
(output (lambda () (equal? (cons "c" (cons 'stay "1")) (match-rule "3" "a" table28))))
(output (lambda () (equal? (cons "a" (cons 'stay "2")) (match-rule "2" "c" table28))))
(output (lambda () (equal? (cons "c" (cons 'left "1")) (match-rule "2" "a" table28))))
(output (lambda () (equal? (cons "c" (cons 'stay "4")) (match-rule "5" "-" table28))))
(output (lambda () (equal? (cons "e" (cons 'left "1")) (match-rule "4" "c" table28))))
(output (lambda () (equal? (cons "b" (cons 'left "4")) (match-rule "7" "a" table28))))


;;; Turaing machine
(printf "Turing machine\n")

(define tm1 (make-tm (list "a" "b") "1" table28))
(define tm2 (step-tm tm1))
(define tm3 (step-tm tm2))
(define tm4 (step-tm tm3))
(define tm5 (step-tm tm4))
(define tm6 (step-tm tm5))
(define tm7 (step-tm tm6))
(define tm8 (step-tm tm7))
(define tm9 (step-tm tm8))
(define tm10 (step-tm tm9))
(define tm11 (step-tm tm10))
(define tm12 (step-tm tm11))
(define tm13 (step-tm tm12))
(define tm14 (step-tm tm13))
(define tm15 (step-tm tm14))
(define tm_run (run-tm tm1))
(define tm_run1 (run-tm tm_run))
(define tm_run2 (run-tm tm_run1))
(define tm_run3 (run-tm tm_run2))

(output (lambda () (equal? "-.-.a.b.-" (print-tm tm1 2))))
(output (lambda () (equal? "-.d.b.-.-" (print-tm tm2 2))))
(output (lambda () (equal? "d.e.-.-.-" (print-tm tm3 2))))
(output (lambda () (equal? "-.d.e.b.-" (print-tm tm4 2))))
(output (lambda () (equal? "-.-.d.a.b" (print-tm tm5 2))))
(output (lambda () (equal? "-.-.-.c.a" (print-tm tm6 2))))
(output (lambda () (equal? "-.-.c.c.a" (print-tm tm7 2))))
(output (lambda () (equal? "-.-.-.-.-.-.-.a.c.a.b.-.-.-.-" (print-tm tm8 7))))
(output (lambda () (equal? "-.-.-.-.-.-.-.c.c.a.b.-.-.-.-" (print-tm tm9 7))))
(output (lambda () (equal? "-.-.-.-.-.-.-.-.d.c.a.b.-.-.-" (print-tm tm10 7))))
(output (lambda () (equal? "-.-.-.-.-.-.-.-.-.-.-.c.d.d.c.a.b.-.-.-.-" (print-tm tm_run 10))))

; If no rule is applicable, just do nothing.
(output (lambda () (equal? "-.-.-.-.-.-.-.-.-.-.-.c.d.d.c.a.b.-.-.-.-" (print-tm tm_run1 10))))

(output (lambda () (equal? "-.-.-.-.-.-.-.-.-.-.-.c.d.d.c.a.b.-.-.-.-" (print-tm tm_run2 10))))
(output (lambda () (equal? "-.-.-.-.-.-.-.-.-.-.-.c.d.d.c.a.b.-.-.-.-" (print-tm tm_run3 10))))





(define tble1 empty-ruletable)
(define tble2 (add-rule (make-rule "empty" "a" "a" 'right "carrying") tble1))
(define tble3 (add-rule (make-rule "carrying" "a" "a" 'right "carrying") tble2))

(define (steps-tm n tm)
  (if (zero? n) tm
      (steps-tm (- n 1) (step-tm tm))))

(define t1 (make-tm (list "a" "a" "a" "a" "a" "a" "a" "a") "empty" tble3))
(define t2 (steps-tm 8 t1))

(output (lambda () (equal? "-.-.-.a.a.a.a" (print-tm t1 3))))
(output (lambda () (equal? "a.a.a.-.-.-.-" (print-tm t2 3))))
(print-tm t1 10)
(print-tm t2 10)
